package com.bedrockframework.engine.manager{	import com.bedrockframework.core.base.StandardWidget;	import com.bedrockframework.core.dispatcher.BedrockDispatcher;	import com.bedrockframework.engine.api.ICopyManager;	import com.bedrockframework.engine.event.BedrockEvent;	import com.bedrockframework.plugin.storage.HashMap;	import com.bedrockframework.plugin.util.XMLUtil;		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	public class CopyManager extends StandardWidget implements ICopyManager	{		/*		* Variable Declarations		*/		private var _objCopyMap:HashMap;		private var _objURLLoader:URLLoader;		/*		* Constructor		*/		public function CopyManager()		{		}		public function initialize($path:String):void		{			this._objURLLoader = new URLLoader();			this._objURLLoader.addEventListener(Event.COMPLETE, this.onXMLProcess,false,0,true);			this._objURLLoader.addEventListener(IOErrorEvent.IO_ERROR, this.onXMLError,false,0,true);			this._objURLLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onXMLError,false,0,true);			this.loadXML($path);		}		public function loadXML($path:String):void		{			this._objURLLoader.load(new URLRequest($path));		}				private function parseXML($xml:String):void		{			this._objCopyMap = new HashMap();			var xmlCopy:XML = new XML($xml);			var objResult:Object = XMLUtil.getObject(xmlCopy);			for (var d:String in objResult) {				this._objCopyMap.saveValue(d, objResult[d]);			}			BedrockDispatcher.dispatchEvent(new BedrockEvent(BedrockEvent.COPY_LOADED, CopyManager));		}				public function getCopy($key:String):String		{			return this._objCopyMap.getValue($key);		}		/*		Event Handlers		*/		private function onXMLProcess($event:Event):void		{			this.parseXML(this._objURLLoader.data);		}		private function onXMLError($event:Event):void		{			this.warning(CopyManager, "Could not parse copy!")		}	}}