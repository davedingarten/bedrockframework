package com.bedrockframework.engine.manager{	/*	Imports	*/	import com.bedrockframework.core.base.StandardWidget;	import com.bedrockframework.engine.api.IAssetManager;	import com.bedrockframework.plugin.storage.HashMap;		import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.media.Sound;	/*	Class Declaration	*/	public class AssetManager extends StandardWidget implements IAssetManager	{		/*		* Variable Declarations		*/		private var _objViewMap:HashMap;		private var _objPreloaderMap:HashMap;		private var _objBitmapMap:HashMap;		private var _objSoundMap:HashMap;		/*		Initialize the class		*/		public function AssetManager()		{			this._objViewMap = new HashMap;			this._objPreloaderMap = new HashMap;			this._objBitmapMap = new HashMap;			this._objSoundMap = new HashMap;		}		/*		Add/ Return new preloader instance		*/		public function addPreloader($alias:String, $class:Class):void		{			this._objPreloaderMap.saveValue($alias, $class);		}		public function getPreloader($alias:String):MovieClip		{			var clsResult:Class = this._objPreloaderMap.getValue($alias);			return new clsResult;		}		public function hasPreloader($alias:String):Boolean		{			return this._objPreloaderMap.containsKey($alias);		}		/*		Add/ Return new view instance		*/		public function addView($alias:String, $class:Class):void		{			this._objViewMap.saveValue($alias, $class);		}		public function getView($alias:String):MovieClip		{			var clsResult:Class = this._objViewMap.getValue($alias);			return new clsResult;		}		public function hasView($alias:String):Boolean		{			return this._objViewMap.containsKey($alias);		}		public function getViews():Array		{			var arrReturn:Array = new Array;			var arrKeys:Array = this._objViewMap.getKeys();			var numLength:int = arrKeys.length;			for (var i:int = 0 ; i < numLength; i++) {				arrReturn.push({alias:arrKeys[i], value:this.getView(arrKeys[i])});			}			return arrReturn;		}		/*		Add/ Return new bitmap instance		*/		public function addBitmap($alias:String, $class:Class):void		{			this._objBitmapMap.saveValue($alias, $class);		}		public function getBitmap($alias:String):BitmapData		{			var clsResult:Class = this._objBitmapMap.getValue($alias);			return new clsResult(0,0);		}		public function hasBitmap($alias:String):Boolean		{			return this._objBitmapMap.containsKey($alias);		}		public function getBitmaps():Array		{			var arrReturn:Array = new Array;			var arrKeys:Array = this._objBitmapMap.getKeys();						var numLength:int = arrKeys.length;			for (var i:int = 0 ; i < numLength; i++) {				arrReturn.push({alias:arrKeys[i], value:this.getBitmap(arrKeys[i])});			}			return arrReturn;		}		/*		Add/ Return new sound instance		*/		public function addSound($alias:String, $class:Class):void		{			this._objSoundMap.saveValue($alias, $class);		}		public function getSound($alias:String):Sound		{			var clsResult:Class = this._objSoundMap.getValue($alias);			return new clsResult;		}		public function hasSound($alias:String):Boolean		{			return this._objSoundMap.containsKey($alias);		}		public function getSounds():Array
		{
			var arrReturn:Array = new Array;			var arrKeys:Array = this._objSoundMap.getKeys();						var numLength:int = arrKeys.length;
			for (var i:int = 0 ; i < numLength; i++) {
				arrReturn.push({alias:arrKeys[i], value:this.getSound(arrKeys[i])});
			}			return arrReturn;
		}	}}