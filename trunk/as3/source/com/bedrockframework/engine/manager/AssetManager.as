package com.bedrockframework.engine.manager{	/*	Imports	*/	import com.bedrockframework.core.base.StandardWidget;	import com.bedrockframework.engine.api.IAssetManager;	import com.bedrockframework.plugin.storage.HashMap;		import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.media.Sound;	/*	Class Declaration	*/	public class AssetManager extends StandardWidget implements IAssetManager	{		/*		* Variable Declarations		*/		private var _objViewMap:HashMap;		private var _objPreloaderMap:HashMap;		private var _objBitmapMap:HashMap;		private var _objSoundMap:HashMap;		/*		Initialize the class		*/		public function AssetManager()		{			this._objViewMap = new HashMap;			this._objPreloaderMap = new HashMap;			this._objBitmapMap = new HashMap;			this._objSoundMap = new HashMap;		}		/*		Add/ Return new view instance		*/		public function addView($name:String, $class:Class):void		{			this._objViewMap.saveValue($name, $class);		}		public function getView($name:String):MovieClip		{			var clsResult:Class = this._objViewMap.getValue($name);			return new clsResult;		}		public function hasView($name:String):Boolean		{			return this._objViewMap.containsKey($name);		}		/*		Add/ Return new preloader instance		*/		public function addPreloader($name:String, $class:Class):void		{			this._objPreloaderMap.saveValue($name, $class);		}		public function getPreloader($name:String):MovieClip		{			var clsResult:Class = this._objPreloaderMap.getValue($name);			return new clsResult;		}		public function hasPreloader($name:String):Boolean		{			return this._objPreloaderMap.containsKey($name);		}		/*		Add/ Return new bitmap instance		*/		public function addBitmap($name:String, $class:Class):void		{			this._objBitmapMap.saveValue($name, $class);		}		public function getBitmap($name:String):BitmapData		{			var clsResult:Class = this._objBitmapMap.getValue($name);			return new clsResult(0,0);		}		public function hasBitmap($name:String):Boolean		{			return this._objBitmapMap.containsKey($name);		}		/*		Add/ Return new sound instance		*/		public function addSound($name:String, $class:Class):void		{			this._objSoundMap.saveValue($name, $class);		}		public function getSound($name:String):Sound		{			var clsResult:Class = this._objSoundMap.getValue($name);			return new clsResult;		}		public function hasSound($name:String):Boolean		{			return this._objSoundMap.containsKey($name);		}	}}