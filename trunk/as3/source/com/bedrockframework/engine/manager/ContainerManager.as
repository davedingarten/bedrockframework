package com.bedrockframework.engine.manager{	import com.bedrockframework.core.base.StandardWidget;	import com.bedrockframework.core.logging.LogLevel;	import com.bedrockframework.core.logging.Logger;	import com.bedrockframework.engine.api.IContainerManager;	import com.bedrockframework.plugin.loader.VisualLoader;	import com.bedrockframework.plugin.storage.HashMap;		import flash.display.DisplayObjectContainer;	public class ContainerManager extends StandardWidget implements IContainerManager	{		/*		* Variable Declarations		*/		private var _objScope:DisplayObjectContainer;		private var _objContainerMap:HashMap=new HashMap;		/*		* Constructor		*/		Logger.log(ContainerManager, LogLevel.CONSTRUCTOR, "Constructed");		public function initialize($scope:DisplayObjectContainer):void		{			this._objScope=$scope;		}		public function buildContainer($name:String,$child:DisplayObjectContainer=null,$properties:Object=null,$container:DisplayObjectContainer=null,$depth:int=-1):*		{			var numDepth:int=-1;			if (this.containsItem($name)) {				numDepth=this.getDepth($name);				this.removeContainer($name);			}			numDepth=$depth > -1?$depth:numDepth;						var objChild:DisplayObjectContainer=$child || new VisualLoader;					var numActualDepth:int=this.addChild($container || this._objScope,objChild,numDepth);			this.applyProperties(objChild,$properties);			this.saveItem($name,objChild,numActualDepth);			return objChild;		}		private function addChild($container:DisplayObjectContainer,$child:DisplayObjectContainer,$depth:int=-1):int		{			try {				$container.addChildAt($child,$depth);			} catch ($error:Error) {				$container.addChild($child);			}			return $container.getChildIndex($child);		}		/*		Layout Related		*/		public function buildLayout($layout:Array):void		{			for (var i:int = 0; i < $layout.length; i++) {				this.buildLayoutContainer($layout[i]);			}		}		private function buildLayoutContainer($properties:Object):void		{			var strName:String =$properties.name;			var objView:DisplayObjectContainer = $properties.view || new VisualLoader();			delete $properties.name;			delete $properties.view;			this.buildContainer(strName, objView, $properties);		}		/*		Item Specific Stuff		*/		public function saveItem($name:String,$child:DisplayObjectContainer,$depth:int):void		{			this._objContainerMap.saveValue($name,{container:$child,depth:$depth});		}		public function getItem($name:String):Object		{			return this._objContainerMap.getValue($name);		}		public function removeItem($name:String):void		{			this._objContainerMap.removeValue($name);		}		public function containsItem($name:String):Boolean		{			return this._objContainerMap.containsKey($name);		}		/*		Apply Property Object to container		*/		private function applyProperties($target:DisplayObjectContainer,$properties:Object=null):void		{			for (var i:String in $properties) {				$target[i]=$properties[i];			}		}		/*		Depth Functions		*/		public function getDepth($name:String):int		{			var objItem:Object=this.getItem($name);			return objItem.depth;		}		private function getActualDepth($name:String):int		{			var objChild:* =this.getContainer($name);			var objParent:* =this.getContainerParent($name);			return objParent.getChildIndex(objChild);		}		/*		Container Functions		*/		public function getContainer($name:String):*		{			var objItem:Object=this.getItem($name);			return objItem?objItem.container:null;		}		public function getContainerParent($name:String):*		{			var objContainer:Object=this.getContainer($name);			return objContainer?objContainer.parent:null;		}		public function removeContainer($name:String):void		{			var objChild:* =this.getContainer($name);			var objParent:* =this.getContainerParent($name);			if (objChild && objParent) {				objParent.removeChild(objChild);			}		}		/*		Swapping Functions		*/		public function swapChildren($name1:String,$name2:String):void		{			var objChild1:* =this.getContainer($name1);			var objChild2:* =this.getContainer($name2);			if (objChild1.parent === objChild2.parent) {				objChild1.parent.swapChildren(objChild1,objChild2);			} else {				this.error("Parent containers do not match!");			}		}		public function swapTo($name:String,$depth:Number):void		{			var objChild:* =this.getContainer($name);			var objParent:* =this.getContainerParent($name);			try {				objParent.setChildIndex(objChild,$depth);			} catch ($e:RangeError) {				this.error($e.message + " Swap failed!");			}		}		public function swapToTop($name:String,$offset:Number=0):void		{			var objParent:* =this.getContainerParent($name);			this.swapTo($name,objParent.numChildren - 1 + $offset);		}		public function swapToBottom($name:String,$offset:Number=0):void		{			var objParent:* =this.getContainerParent($name);			this.swapTo($name,0 + $offset);		}	}}