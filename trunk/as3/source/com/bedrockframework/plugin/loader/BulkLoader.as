package com.bedrockframework.plugin.loader{	import com.bedrockframework.plugin.event.BulkLoaderEvent;	import com.bedrockframework.plugin.event.LoaderEvent;	import com.bedrockframework.core.base.DispatcherWidget;	import com.bedrockframework.plugin.storage.ArrayCollection;	import com.bedrockframework.plugin.storage.ArrayOperator;	import com.bedrockframework.plugin.util.MathUtil;		import flash.system.LoaderContext;	public class BulkLoader extends DispatcherWidget	{		/*		Variable Delarations		*/		private var _bolRunning:Boolean;		private var _bolComplete:Boolean;		private var _bolAddWhileRunning:Boolean;		private var _arrQueue:Array;		private var _arrCurrentLoad:ArrayCollection;		private var _numMaxConcurrentLoads:uint;		private var _numLoadIndex:uint;		private var _numTotalFiles:uint;		private var _numOverallPercentage:uint;		private var _numTotalPercentage:uint;		private var _numLoadedPercentage:uint;				private var _objLoaderContext:LoaderContext;		private var _objQueueBrowser:ArrayOperator;		/*		Constructor		*/		public function BulkLoader()		{			this._arrQueue=new Array  ;			this._arrCurrentLoad = new ArrayCollection();			this._numLoadIndex=0;			this._numMaxConcurrentLoads = 2;			this._objQueueBrowser = new ArrayOperator();			this._bolRunning=false;			this._bolComplete=false;			this._bolAddWhileRunning = false;		}		/*		Setup		*/		public function setup($context:LoaderContext):void		{			this._objLoaderContext = $context;		}		/*		Reset		*/		public function reset():void		{			this._arrQueue=new Array();			this._arrCurrentLoad = new ArrayCollection();			this._objQueueBrowser.data = this._arrQueue;			this._numLoadIndex=0;			this._bolRunning=false;			this._bolComplete=false;			this._numOverallPercentage = 0;			this._numTotalPercentage = 0;			this.status("Reset");			this.dispatchEvent(new BulkLoaderEvent(BulkLoaderEvent.RESET,this));		}		public function close():void		{			if (this._arrQueue.length > 0) {				var numLength:uint = this._arrCurrentLoad.length;				var objQueueItem:*				for (var i = 0; i < numLength; i++) {					objQueueItem = this._arrCurrentLoad[i];					objQueueItem.close();					this.removeListeners(objQueueItem);				}												this.reset();				this.status("Close");				this.dispatchEvent(new BulkLoaderEvent(BulkLoaderEvent.CLOSE,this));			}		}		public function loadQueue():void		{			if (this._arrQueue.length > 0) {				this._objQueueBrowser.data = this._arrQueue;				this.sortByPriority();				this.recalculate();				this.begin();			} else {				this.status("Unable to load, queue is empty!","warning");				this.dispatchEvent(new BulkLoaderEvent(BulkLoaderEvent.ERROR,this, {text:"Unable to load, queue is empty!"}));			}		}		public function addToQueue($file:String,$loader:VisualLoader=null,$priority:uint=0, $id:String=null, $completeHandler:Function=null, $errorHandler:Function=null):void		{			if (this._bolComplete) {				this.reset();			}			if (!this._bolRunning) {				this.add($file, $loader, $priority, $id, $completeHandler, $errorHandler);			}else if (this._bolAddWhileRunning && this._bolRunning){				this.add($file, $loader, $priority, $id, $completeHandler, $errorHandler);				if (this._arrCurrentLoad.length < this._numMaxConcurrentLoads) {					this.loadNext();				}			} else {							this.status("Cannot add to queue while loading!","warning");			}					}		private function add($file:String,$loader:VisualLoader=null,$priority:uint=0, $id:String=null, $completeHandler:Function=null, $errorHandler:Function=null):void		{			var strFile:String=$file;			var objLoader:* =$loader || new BackgroundLoader  ;			if ($completeHandler != null) {				if (objLoader is BackgroundLoader) {					objLoader.addEventListener(LoaderEvent.COMPLETE,$completeHandler,false,0,true);				} else {					objLoader.addEventListener(LoaderEvent.INIT,$completeHandler,false,0,true);				}							}			if ($errorHandler != null) {				objLoader.addEventListener(LoaderEvent.IO_ERROR,$errorHandler,false,0,true);				objLoader.addEventListener(LoaderEvent.SECURITY_ERROR,$errorHandler,false,0,true);							}			this._arrQueue.push({file:strFile,loader:objLoader,priority:$priority, id:$id, percent:0});			this.recalculate();			this.dispatchEvent(new BulkLoaderEvent(BulkLoaderEvent.FILE_ADDED,this,{files:this._arrQueue,index:this._numLoadIndex,total:this._numTotalFiles}));		}		/*		Current Load Managment		*/		private function addToCurrentLoad($loader:*):void		{			this._arrCurrentLoad.push($loader);		}		private function removeFromCurrentLoad($loader:*):void		{			var objBrowser:ArrayOperator = new ArrayOperator(this._arrCurrentLoad);			this._arrCurrentLoad.remove(objBrowser.findIndex($loader));		}		/*		Listener Managment		*/		private function addListeners($target:*):void		{			$target.addEventListener(LoaderEvent.COMPLETE,this.dispatchEvent);			$target.addEventListener(LoaderEvent.OPEN,this.dispatchEvent);			$target.addEventListener(LoaderEvent.INIT,this.dispatchEvent);			$target.addEventListener(LoaderEvent.UNLOAD,this.dispatchEvent);			$target.addEventListener(LoaderEvent.HTTP_STATUS,this.dispatchEvent);			$target.addEventListener(LoaderEvent.IO_ERROR,this.dispatchEvent);			$target.addEventListener(LoaderEvent.SECURITY_ERROR,this.dispatchEvent);			//			$target.addEventListener(LoaderEvent.PROGRESS,this.onProgress);			$target.addEventListener(LoaderEvent.COMPLETE,this.onFileComplete);			$target.addEventListener(LoaderEvent.IO_ERROR,this.onFileError);		}		private function removeListeners($target:*):void		{			$target.removeEventListener(LoaderEvent.COMPLETE,this.dispatchEvent);			$target.removeEventListener(LoaderEvent.OPEN,this.dispatchEvent);			$target.removeEventListener(LoaderEvent.INIT,this.dispatchEvent);			$target.removeEventListener(LoaderEvent.UNLOAD,this.dispatchEvent);			$target.removeEventListener(LoaderEvent.HTTP_STATUS,this.dispatchEvent);			$target.removeEventListener(LoaderEvent.IO_ERROR,this.dispatchEvent);			$target.removeEventListener(LoaderEvent.SECURITY_ERROR,this.dispatchEvent);			//			$target.removeEventListener(LoaderEvent.PROGRESS,this.onProgress);			$target.removeEventListener(LoaderEvent.COMPLETE,this.onFileComplete);			$target.removeEventListener(LoaderEvent.IO_ERROR,this.onFileError);		}		/*		Calculate Percentage		*/		private function recalculate():void		{			this._numTotalFiles=this._arrQueue.length;			this._numTotalPercentage=this._numTotalFiles * 100;		}		private function calculateOverallPercentage():uint		{			this._numLoadedPercentage = 0;			var numLength:uint = this._arrQueue.length;			for (var i = 0 ; i < numLength; i ++) {				this._numLoadedPercentage += this._arrQueue[i].percent;			}						this._numOverallPercentage=MathUtil.calculatePercentage(this._numLoadedPercentage,this._numTotalPercentage);			return this._numOverallPercentage;		}		private function sortByPriority():void		{			this._arrQueue.sortOn(["priority"], Array.NUMERIC | Array.DESCENDING);		}		/*		Begin Downloading Queued Files		*/		private function begin():void		{			if (! this._bolRunning) {				this._bolRunning=true;				this.status("Begin Load");				var numLength:int = (this._numTotalFiles >= this._numMaxConcurrentLoads) ? this._numMaxConcurrentLoads : this._arrQueue.length;				for (var i = 0; i < numLength; i ++) {					this.loadURL(i);				}				this.dispatchEvent(new BulkLoaderEvent(BulkLoaderEvent.BEGIN,this,{total:this._numTotalFiles}));			}		}		private function loadURL($index:uint):void		{			this._numLoadIndex=$index;			var objQueueItem:Object=this.getQueueItem(this._numLoadIndex);			this.status("Loading - " + objQueueItem.file);			objQueueItem.loader.loadURL(objQueueItem.file, this._objLoaderContext);			this.addListeners(objQueueItem.loader);			this.addToCurrentLoad(objQueueItem.loader);			this.dispatchEvent(new BulkLoaderEvent(BulkLoaderEvent.FILE_OPEN,this,objQueueItem));		}		private function loadNext():void		{			if (this._bolRunning) {				var numTempIndex:uint=this._numLoadIndex + 1;				if (numTempIndex != this._numTotalFiles) {					var objQueueItem:Object = this.getQueueItem(numTempIndex);					this.loadURL(numTempIndex);					this.dispatchEvent(new BulkLoaderEvent(BulkLoaderEvent.NEXT,this,{file:objQueueItem.file,total:this._numTotalFiles, index:this._numLoadIndex}));				} else {					this.loadComplete();				}			}		}		private function loadComplete():void		{			this.calculateOverallPercentage();			if (!this._bolComplete) {				this._bolComplete=true;				this.status("Complete!");				this.dispatchEvent(new BulkLoaderEvent(BulkLoaderEvent.COMPLETE,this,{total:this._numTotalFiles}));			}					}		/*		Getters		*/				public function getLoader($id:String):*		{			var objBrowser:ArrayOperator = new ArrayOperator(this._arrQueue);			return objBrowser.findItem($id, "id").loader;		}				public function getQueueItem($index:int):Object		{			return this._arrQueue[$index];		}		private function getQueueItemByLoader($loader:*):Object		{			var objBrowser:ArrayOperator = new ArrayOperator(this._arrQueue);			return objBrowser.findItem($loader, "loader");		}		/*				Event Handlers				*/		private function onFileError($event:LoaderEvent):void		{			var objQueueItem:Object = this.getQueueItemByLoader($event.target);			this.status("Could not find - " + objQueueItem.file + "!","warning");			this.removeFromCurrentLoad($event.target);			this.loadNext();		}		private function onProgress($event:LoaderEvent):void		{			var objQueueItem:Object = this.getQueueItemByLoader($event.target);			objQueueItem.percent = $event.details.percent;			//			this.calculateOverallPercentage();			//			var objDetails:Object=new Object  ;			objDetails.overallPercent=this._numOverallPercentage;			objDetails.filePercent=$event.details.percent;			objDetails.loadedPercent=this._numLoadedPercentage;			objDetails.totalPercent=this._numTotalPercentage;			objDetails.loadIndex=this._numLoadIndex;			objDetails.totalFiles=this._numTotalFiles;			this.dispatchEvent(new BulkLoaderEvent(BulkLoaderEvent.PROGRESS,this,objDetails));		}		private function onFileComplete($event:LoaderEvent):void		{			this.removeFromCurrentLoad($event.target);			this.removeListeners($event.target);			this.loadNext();		}		/*		Property Definitions		*/		public function get complete():Boolean		{			return this._bolComplete;		}				public function get running():Boolean		{			return this._bolRunning		}				public function set addWhileRunning($status:Boolean):void		{			this._bolAddWhileRunning = $status;		}		public function get addWhileRunning():Boolean		{			return this._bolAddWhileRunning;		}				public function set cuncurrentLoads($count:uint):void		{			this._numMaxConcurrentLoads = $count;					}		public function get cuncurrentLoads():uint		{			return this._numMaxConcurrentLoads;					}	}}